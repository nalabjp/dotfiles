" ColorSchema {{{
" }}}


" Unite {{{
"------------------------------------
" unite.vim
"------------------------------------
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" }}}


" Util {{{
"------------------------------------
" fugitive.vim
"------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>

"------------------------------------
" lightline.vim
"------------------------------------
let g:lightline = {
  \ 'colorscheme': 'Tomorrow_Night_Bright',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component': {
  \   'readonly': '%{&filetype=="help"?"":&readonly?"x":""}',
  \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
  \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
  \ },
  \ 'component_visible_condition': {
  \   'readonly': '(&filetype!="help"&& &readonly)',
  \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '|', 'right': '|' }
  \ }


" Edit {{{
"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader>x, c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1
" }}}


" Move {{{
"------------------------------------
" vim-easymotion
"------------------------------------
" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「'」 + 何かにマッピング
let g:EasyMotion_leader_key="'"
" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1
" }}}


" Completion {{{
"------------------------------------
" neocomplecache.vim
"------------------------------------
".vim/bundle/neocomplcache/doc/neocomplcache.txt
"から、必須設定と書かれている部分をコピペ
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
      \  'default' : '',
      \  'vimshell' : $HOME.'/.vimshell_hist',
      \  'scheme' : $HOME.'/.gosh_completions'
      \}

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

"------------------------------------
" neosnippet
"------------------------------------
" snippetを保存するディレクトリを設定してください
" example
let s:default_snippet = neobundle#get_neobundle_dir() . '/neosnippet/autoload/neosnippet/snippets' " 本体に入っているsnippet
let s:ruby_snippet = '~/.vim/snippets/ruby_snip' " 自分のsnippet
let g:neosnippet#snippets_directory = s:default_snippet . ',' . s:ruby_snippet
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_jump_or_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"
imap <silent><C-F>                <Plug>(neosnippet_expand_or_jump)
inoremap <silent><C-U>            <ESC>:<C-U>Unite snippet<CR>
nnoremap <silent><Space>e         :<C-U>NeoSnippetEdit -split<CR>
smap <silent><C-F>                <Plug>(neosnippet_expand_or_jump)

" ------------------------------------
" switch.vim
" ------------------------------------
nnoremap - :Switch<CR>
let s:switch_definition = {
  \ '*': [
  \   ['is', 'are']
  \ ],
  \ 'ruby,eruby,haml' : [
  \   ['if', 'unless'],
  \   ['while', 'until'],
  \   ['.blank?', '.present?'],
  \   ['include', 'extend'],
  \   ['class', 'module'],
  \   ['.inject', '.delete_if'],
  \   ['.map', '.map!'],
  \   ['attr_accessor', 'attr_reader', 'attr_writer'],
  \ ],
  \ 'Gemfile,Berksfile' : [
  \   ['=', '<', '<=', '>', '>=', '~>'],
  \ ],
  \ 'ruby.application_template' : [
  \   ['yes?', 'no?'],
  \   ['lib', 'initializer', 'file', 'vendor', 'rakefile'],
  \   ['controller', 'model', 'view', 'migration', 'scaffold'],
  \ ],
  \ 'erb,html,php' : [
  \   { '<!--\([a-zA-Z0-9 /]\+\)--></\(div\|ul\|li\|a\)>' : '</\2><!--\1-->' },
  \ ],
  \ 'rails' : [
  \   [100, ':continue', ':information'],
  \   [101, ':switching_protocols'],
  \   [102, ':processing'],
  \   [200, ':ok', ':success'],
  \   [201, ':created'],
  \   [202, ':accepted'],
  \   [203, ':non_authoritative_information'],
  \   [204, ':no_content'],
  \   [205, ':reset_content'],
  \   [206, ':partial_content'],
  \   [207, ':multi_status'],
  \   [208, ':already_reported'],
  \   [226, ':im_used'],
  \   [300, ':multiple_choices'],
  \   [301, ':moved_permanently'],
  \   [302, ':found'],
  \   [303, ':see_other'],
  \   [304, ':not_modified'],
  \   [305, ':use_proxy'],
  \   [306, ':reserved'],
  \   [307, ':temporary_redirect'],
  \   [308, ':permanent_redirect'],
  \   [400, ':bad_request'],
  \   [401, ':unauthorized'],
  \   [402, ':payment_required'],
  \   [403, ':forbidden'],
  \   [404, ':not_found'],
  \   [405, ':method_not_allowed'],
  \   [406, ':not_acceptable'],
  \   [407, ':proxy_authentication_required'],
  \   [408, ':request_timeout'],
  \   [409, ':conflict'],
  \   [410, ':gone'],
  \   [411, ':length_required'],
  \   [412, ':precondition_failed'],
  \   [413, ':request_entity_too_large'],
  \   [414, ':request_uri_too_long'],
  \   [415, ':unsupported_media_type'],
  \   [416, ':requested_range_not_satisfiable'],
  \   [417, ':expectation_failed'],
  \   [422, ':unprocessable_entity'],
  \   [423, ':precondition_required'],
  \   [424, ':too_many_requests'],
  \   [426, ':request_header_fields_too_large'],
  \   [500, ':internal_server_error'],
  \   [501, ':not_implemented'],
  \   [502, ':bad_gateway'],
  \   [503, ':service_unavailable'],
  \   [504, ':gateway_timeout'],
  \   [505, ':http_version_not_supported'],
  \   [506, ':variant_also_negotiates'],
  \   [507, ':insufficient_storage'],
  \   [508, ':loop_detected'],
  \   [510, ':not_extended'],
  \   [511, ':network_authentication_required'],
  \ ],
  \ 'rspec': [
  \   ['describe', 'context', 'specific', 'example'],
  \   ['before', 'after'],
  \   ['be_true', 'be_false'],
  \   ['get', 'post', 'put', 'delete'],
  \   ['==', 'eql', 'equal'],
  \   { '\.should_not': '\.should' },
  \   ['\.to_not', '\.to'],
  \   { '\([^. ]\+\)\.should\(_not\|\)': 'expect(\1)\.to\2' },
  \   { 'expect(\([^. ]\+\))\.to\(_not\|\)': '\1.should\2' },
  \ ],
  \ 'markdown' : [
  \   ['[ ]', '[x]']
  \ ]
  \ }
" }}}


" Programing {{{
"------------------------------------
" quickrun.vim
"------------------------------------
"RSpec対応
let g:quickrun_config = {}
let g:quickrun_config._ = {
  \ 'runner' : 'vimproc',
  \ }
let g:quickrun_config['ruby.rspec'] = { 'command': 'rspec -c -f d', 'cmdopt': 'bundle exec spring', 'exec': '%o %c %s' }

"------------------------------------
" vim-rails.vim
"------------------------------------
let g:rails_some_option = 1
let g:rails_level = 4
let g:rails_syntax = 1
let g:rails_statusline = 1
let g:rails_url='http://localhost:3000'
function! SetUpRailsSetting()
  nmap <buffer><C-C> <Nop>
  imap <buffer><C-C> <Nop>
  map <buffer><C-_><C-C> <Nop>

  nmap <buffer><Space>r :R<CR>
  nmap <buffer><Space>a :A<CR>
  nmap <buffer><Space>m :Rmodel<Space>
  nmap <buffer><Space>c :Rcontroller<Space>
  nmap <buffer><Space>v :Rview<Space>
  nmap <buffer><Space>s :Rspec<Space>
  nmap <buffer><Space>p :Rpreview<CR>
  nmap <buffer><Space>t :Runittest<CR>
endfunction
autocmd User Rails call SetUpRailsSetting()

"------------------------------------
" vim-rspec
"------------------------------------
let g:rspec_command = "Dispatch bundle exec spring rspec -cfs {spec}"
nmap <silent><leader>c :call RunCurrentSpecFile()<CR>
nmap <silent><leader>n :call RunNearestSpec()<CR>
nmap <silent><leader>l :call RunLastSpec()<CR>
nmap <silent><leader>a :call RunAllSpecs()<CR>
" }}}


" Syntax {{{
" }}}


" Buffer {{{
"------------------------------------
" NERDTree
"------------------------------------
nnoremap <silent> ,nt :<C-u>NERDTree<CR>
nnoremap <silent> ,ntt :<C-u>NERDTreeToggle<CR>
" }}}


