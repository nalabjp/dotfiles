# command line stack
function show_buffer_stack() {
  POSTDISPLAY="
stack: $LBUFFER"
  zle push-line-or-edit
}
zle -N show_buffer_stack

# ag and nvim
function av () {
  nvim $(ag $@ | fzf --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
}

# ag -h and nvim
function ahv () {
  nvim $(agh $@ | fzf --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
}

# git grep and nvim
function gv () {
  nvim $(git grep -n $@ | fzf --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
}

function _memo() {
  touch `date '+%y%m%d'`.md && nvim `date '+%y%m%d'`.md
}

function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
function is_osx() { [[ $OSTYPE == darwin* ]]; }
function is_screen_running() { [ ! -z "$STY" ]; }
function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }

# tmux
function tmux_automatically_attach_session()
{
    if is_screen_or_tmux_running; then
        ! is_exists 'tmux' && return 1

        if is_tmux_runnning; then
            # echo "${fg_bold[red]} _____ __  __ _   ___  __ ${reset_color}"
            # echo "${fg_bold[red]}|_   _|  \/  | | | \ \/ / ${reset_color}"
            # echo "${fg_bold[red]}  | | | |\/| | | | |\  /  ${reset_color}"
            # echo "${fg_bold[red]}  | | | |  | | |_| |/  \  ${reset_color}"
            # echo "${fg_bold[red]}  |_| |_|  |_|\___//_/\_\ ${reset_color}"
        elif is_screen_running; then
            echo "This is on screen."
        fi
    else
        if shell_has_started_interactively && ! is_ssh_running; then
            if ! is_exists 'tmux'; then
                echo 'Error: tmux command not found' 2>&1
                return 1
            fi

            if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
                # detached session exists
                tmux list-sessions
                echo -n "Tmux: attach? (y/N/num) "
                read
                if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
                    tmux attach-session
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
                    tmux attach -t "$REPLY"
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                fi
            fi

            tmux new-session && echo "tmux created new session"
            exit;
        fi
    fi
}

function _fzf_cd_git_src() {
    local root=${GIT_HOME}
    local repo="$(find ${root} -depth 2 -type d | fzf --preview="ls -AF --color=always {1}")"
    local dir="${repo}"
    [ -n "${dir}" ] && cd "${dir}"
    zle accept-line
    zle reset-prompt
}
zle -N _fzf_cd_git_src

function _fzf_kill_process() {
    local process="$(ps -u $USER -o pid,stat,%cpu,%mem,cputime,command | fzf | awk '{print $1}')"
    kill $process
    zle accept-line
    zle reset-prompt
}
zle -N _fzf_kill_process

function _fzf_git_checkout_branch() {
    local branch="$(git branches | fzf | awk '{print $2}')"
    git checkout $branch
    zle accept-line
    zle reset-prompt
}
zle -N _fzf_git_checkout_branch
